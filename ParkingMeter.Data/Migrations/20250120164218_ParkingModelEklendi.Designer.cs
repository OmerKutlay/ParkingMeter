// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkingMeter.Data;

#nullable disable

namespace ParkingMeter.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250120164218_ParkingModelEklendi")]
    partial class ParkingModelEklendi
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ParkingMeter.Models.ParkSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Column")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("VehicleId")
                        .IsUnique()
                        .HasFilter("[VehicleId] IS NOT NULL");

                    b.ToTable("ParkSlots");
                });

            modelBuilder.Entity("ParkingMeter.Models.Parking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParkSlotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParkSlotId");

                    b.ToTable("Parkings");
                });

            modelBuilder.Entity("ParkingMeter.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Payment")
                        .HasColumnType("int");

                    b.Property<decimal>("Recipe")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Payment");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ParkingMeter.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExitTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubscribed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParkSlotId")
                        .HasColumnType("int");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("ParkingPayment", b =>
                {
                    b.Property<int>("ParkingsId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentsId")
                        .HasColumnType("int");

                    b.HasKey("ParkingsId", "PaymentsId");

                    b.HasIndex("PaymentsId");

                    b.ToTable("ParkingPayment");
                });

            modelBuilder.Entity("ParkingVehicle", b =>
                {
                    b.Property<int>("ParkingsId")
                        .HasColumnType("int");

                    b.Property<int>("VehiclesId")
                        .HasColumnType("int");

                    b.HasKey("ParkingsId", "VehiclesId");

                    b.HasIndex("VehiclesId");

                    b.ToTable("ParkingVehicle");
                });

            modelBuilder.Entity("ParkingMeter.Models.ParkSlot", b =>
                {
                    b.HasOne("ParkingMeter.Models.Payment", null)
                        .WithMany("ParkSlots")
                        .HasForeignKey("PaymentId");

                    b.HasOne("ParkingMeter.Models.Vehicle", "Vehicle")
                        .WithOne("ParkSlot")
                        .HasForeignKey("ParkingMeter.Models.ParkSlot", "VehicleId");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("ParkingMeter.Models.Parking", b =>
                {
                    b.HasOne("ParkingMeter.Models.ParkSlot", "ParkSlot")
                        .WithMany("Parkings")
                        .HasForeignKey("ParkSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParkSlot");
                });

            modelBuilder.Entity("ParkingMeter.Models.Payment", b =>
                {
                    b.HasOne("ParkingMeter.Models.Vehicle", "Vehicle")
                        .WithMany("Payments")
                        .HasForeignKey("Payment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("ParkingPayment", b =>
                {
                    b.HasOne("ParkingMeter.Models.Parking", null)
                        .WithMany()
                        .HasForeignKey("ParkingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkingMeter.Models.Payment", null)
                        .WithMany()
                        .HasForeignKey("PaymentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParkingVehicle", b =>
                {
                    b.HasOne("ParkingMeter.Models.Parking", null)
                        .WithMany()
                        .HasForeignKey("ParkingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkingMeter.Models.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehiclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParkingMeter.Models.ParkSlot", b =>
                {
                    b.Navigation("Parkings");
                });

            modelBuilder.Entity("ParkingMeter.Models.Payment", b =>
                {
                    b.Navigation("ParkSlots");
                });

            modelBuilder.Entity("ParkingMeter.Models.Vehicle", b =>
                {
                    b.Navigation("ParkSlot");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
